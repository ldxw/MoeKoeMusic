name: Push Multi-Arch Docker Images

on:
  workflow_dispatch:
    inputs:
      version:
        description: "镜像版本号 (默认: v1.4.8)"
        required: false
        default: "v1.4.8"
      use_remote:
        description: "⬜ 勾选启用远程构建（默认使用本地源码）"
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    name: Build and Push Multi-Platform Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Get default branch name
        id: default_branch
        run: |
          # 获取仓库默认分支名称（通常是main或master）
          DEFAULT_BRANCH=$(gh api repos/${{ github.repository }} --jq .default_branch)
          echo "DEFAULT_BRANCH=$DEFAULT_BRANCH" >> $GITHUB_OUTPUT
          echo "✅ 检测到默认分支: $DEFAULT_BRANCH"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout default branch code
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.default_branch.outputs.DEFAULT_BRANCH }}  # 明确检出默认分支
          fetch-depth: 1  # 浅克隆，仅获取最新提交

      - name: Set version and image tags
        id: vars
        run: |
          set -euo pipefail
          VERSION=${{ github.event.inputs.version || 'v1.4.8' }}
          OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "TAG_DH_LATEST=ldxw/moekoe-music:latest" >> $GITHUB_OUTPUT
          echo "TAG_DH_VERSION=ldxw/moekoe-music:$VERSION" >> $GITHUB_OUTPUT
          echo "TAG_GHCR_LATEST=ghcr.io/$OWNER/moekoe-music:latest" >> $GITHUB_OUTPUT
          echo "TAG_GHCR_VERSION=ghcr.io/$OWNER/moekoe-music:$VERSION" >> $GITHUB_OUTPUT

      - name: Prepare source code
        run: |
          set -euo pipefail
          USE_REMOTE=${{ github.event.inputs.use_remote }}
          VERSION=${{ github.event.inputs.version || 'v1.4.8' }}
          DEFAULT_BRANCH=${{ steps.default_branch.outputs.DEFAULT_BRANCH }}

          if [ "$USE_REMOTE" == "true" ]; then
            echo "🔍 检查远程版本是否存在: $VERSION"
            ARCHIVE_URL="https://github.com/iAJue/MoeKoeMusic/archive/refs/tags/${VERSION}.zip"
            if ! curl -f --head -L "$ARCHIVE_URL" > /dev/null 2>&1; then
              echo "❌ 远程源码版本不存在或无法访问: $ARCHIVE_URL"
              exit 1
            fi

            echo "✅ 找到远程源码版本: $VERSION，开始下载..."
            curl -L "$ARCHIVE_URL" -o source.zip
            unzip -q source.zip
            mv MoeKoeMusic-* src
            echo "SOURCE_CONTEXT=src" >> $GITHUB_ENV
          else
            echo "📦 使用默认分支($DEFAULT_BRANCH)的本地源码"
            echo "SOURCE_CONTEXT=." >> $GITHUB_ENV
          fi

      - name: Show source structure (debug)
        run: |
          echo "当前源码目录结构（默认分支 ${{ steps.default_branch.outputs.DEFAULT_BRANCH }}）："
          echo "Source context: ${{ env.SOURCE_CONTEXT }}"
          ls -la ${{ env.SOURCE_CONTEXT }}
          # 显示当前分支信息，确认是否在默认分支
          echo "当前检出分支："
          git branch --show-current

      - name: Check Dockerfile exists
        run: |
          set -euo pipefail
          DOCKERFILE_PATH="${{ env.SOURCE_CONTEXT }}/Dockerfile"
          
          if [ ! -f "$DOCKERFILE_PATH" ]; then
            echo "❌ Dockerfile not found in $DOCKERFILE_PATH"
            echo "默认分支(${{ steps.default_branch.outputs.DEFAULT_BRANCH }})的根目录内容："
            ls -la ${{ env.SOURCE_CONTEXT }}
            
            # 尝试搜索仓库中是否有Dockerfile（递归查找）
            echo "🔍 尝试在仓库中搜索Dockerfile..."
            find . -name "Dockerfile" -print || echo "未找到任何Dockerfile"
            exit 1
          else
            echo "✅ 找到Dockerfile: $DOCKERFILE_PATH"
          fi

      - name: Set up QEMU (for ARM emulation)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Multi-Arch Image
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.SOURCE_CONTEXT }}
          # 如果Dockerfile不在根目录，根据find命令的结果修改下面的路径
          # file: ${{ env.SOURCE_CONTEXT }}/path/to/found/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ steps.vars.outputs.TAG_DH_LATEST }}
            ${{ steps.vars.outputs.TAG_DH_VERSION }}
            ${{ steps.vars.outputs.TAG_GHCR_LATEST }}
            ${{ steps.vars.outputs.TAG_GHCR_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
    
